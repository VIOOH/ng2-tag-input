{"version":3,"file":"accessor.js","sourceRoot":"","sources":["../../../modules/core/accessor.ts"],"names":[],"mappings":";;;;;;;;;AACA,OAAO,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAItC,MAAM,mBAAmB,GAAQ;IAC7B,MAAM,CAAC,GAAG,KAAK,MAAM,CAAC,GAAG,CAAC,CAAC;AAC/B,CAAC;AAED;IAAA;QACY,WAAM,GAAe,EAAE,CAAC;QAQhB,cAAS,GAAW,SAAS,CAAC;QAM9B,eAAU,GAAW,OAAO,CAAC;IAqDjD,CAAC;IAnDG,sBAAW,mCAAK;aAAhB;YACI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACvB,CAAC;aAED,UAAiB,KAAiB;YAC9B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACxC,CAAC;;;OALA;IAAA,CAAC;IAOK,oCAAS,GAAhB;QACI,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC9B,CAAC;IAEM,qCAAU,GAAjB,UAAkB,KAAY;QAC1B,IAAI,CAAC,MAAM,GAAG,KAAK,IAAI,EAAE,CAAC;IAC9B,CAAC;IAEM,2CAAgB,GAAvB,UAAwB,EAAO;QAC3B,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;IAChC,CAAC;IAEM,4CAAiB,GAAxB,UAAyB,EAAO;QAC5B,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;IACjC,CAAC;IAOM,uCAAY,GAAnB,UAAoB,IAAc;QAC9B,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;IACzD,CAAC;IAOM,yCAAc,GAArB,UAAsB,IAAc;QAChC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;IACxD,CAAC;IAOS,0CAAe,GAAzB,UAA0B,KAAa;QACnC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAC,IAAI,EAAE,QAAQ,IAAK,OAAA,QAAQ,KAAK,KAAK,EAAlB,CAAkB,CAAC,CAAC;IACrE,CAAC;IACL,uBAAC;AAAD,CAAC,AApED,IAoEC;;AA3DY;IAAR,KAAK,EAAE;;mDAAsC;AAMrC;IAAR,KAAK,EAAE;;oDAAqC","sourcesContent":["import { ControlValueAccessor } from '@angular/forms';\r\nimport { Input } from '@angular/core';\r\n\r\nexport type TagModel = string | {[key: string]: any};\r\n\r\nexport function isObject(obj: any): boolean {\r\n    return obj === Object(obj);\r\n}\r\n\r\nexport class TagInputAccessor implements ControlValueAccessor {\r\n    private _items: TagModel[] = [];\r\n    private _onTouchedCallback: () => void;\r\n    private _onChangeCallback: (items: TagModel[]) => void;\r\n\r\n    /**\r\n     * @name displayBy\r\n     * @type {string}\r\n     */\r\n    @Input() public displayBy: string = 'display';\r\n\r\n    /**\r\n     * @name identifyBy\r\n     * @type {string}\r\n     */\r\n    @Input() public identifyBy: string = 'value';\r\n\r\n    public get items(): TagModel[] {\r\n        return this._items;\r\n    };\r\n\r\n    public set items(items: TagModel[]) {\r\n        this._items = items;\r\n        this._onChangeCallback(this._items);\r\n    }\r\n\r\n    public onTouched() {\r\n        this._onTouchedCallback();\r\n    }\r\n\r\n    public writeValue(items: any[]) {\r\n        this._items = items || [];\r\n    }\r\n\r\n    public registerOnChange(fn: any) {\r\n        this._onChangeCallback = fn;\r\n    }\r\n\r\n    public registerOnTouched(fn: any) {\r\n        this._onTouchedCallback = fn;\r\n    }\r\n\r\n    /**\r\n     * @name getItemValue\r\n     * @param item\r\n     * @return {TagModel}\r\n     */\r\n    public getItemValue(item: TagModel): string {\r\n        return isObject(item) ? item[this.identifyBy] : item;\r\n    }\r\n\r\n    /**\r\n     * @name getItemDisplay\r\n     * @param item\r\n     * @return {TagModel}\r\n     */\r\n    public getItemDisplay(item: TagModel): string {\r\n        return isObject(item) ? item[this.displayBy] : item;\r\n    }\r\n\r\n    /**\r\n     * @name getItemsWithout\r\n     * @param index\r\n     * @return {TagModel[]}\r\n     */\r\n    protected getItemsWithout(index: number): TagModel[] {\r\n        return this.items.filter((item, position) => position !== index);\r\n    }\r\n}\r\n"]}