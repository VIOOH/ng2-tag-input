{"version":3,"file":"tag-input-form.component.js","sourceRoot":"","sources":["../../../../modules/components/tag-input-form/tag-input-form.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    Component,\r\n    Input,\r\n    Output,\r\n    EventEmitter,\r\n    Renderer2,\r\n    ViewChild\r\n} from '@angular/core';\r\n\r\nimport {\r\n    FormGroup,\r\n    FormControl,\r\n    Validators,\r\n    ValidatorFn,\r\n    AbstractControl,\r\n    AsyncValidatorFn\r\n} from '@angular/forms';\r\n\r\n@Component({\r\n    selector: 'tag-input-form',\r\n    styleUrls: [ './tag-input-form.style.scss' ],\r\n    templateUrl: './tag-input-form.template.html'\r\n})\r\nexport class TagInputForm {\r\n    /**\r\n     * @name onSubmit\r\n     * @type {EventEmitter}\r\n     */\r\n    @Output() public onSubmit: EventEmitter<any> = new EventEmitter();\r\n\r\n    /**\r\n     * @name onBlur\r\n     * @type {EventEmitter}\r\n     */\r\n    @Output() public onBlur: EventEmitter<any> = new EventEmitter();\r\n\r\n    /**\r\n     * @name onFocus\r\n     * @type {EventEmitter}\r\n     */\r\n    @Output() public onFocus: EventEmitter<any> = new EventEmitter();\r\n\r\n    /**\r\n     * @name onKeyup\r\n     * @type {EventEmitter}\r\n     */\r\n    @Output() public onKeyup: EventEmitter<any> = new EventEmitter();\r\n\r\n    /**\r\n     * @name onKeydown\r\n     * @type {EventEmitter}\r\n     */\r\n    @Output() public onKeydown: EventEmitter<any> = new EventEmitter();\r\n\r\n    // inputs\r\n\r\n    /**\r\n     * @name placeholder\r\n     * @type {string}\r\n     */\r\n    @Input() public placeholder: string;\r\n\r\n    /**\r\n     * @name validators\r\n     * @type {ValidatorFn[]}\r\n     */\r\n    @Input() public validators: ValidatorFn[] = [];\r\n\r\n    /**\r\n     * @name asyncValidators\r\n     * @desc array of AsyncValidator that are used to validate the tag before it gets appended to the list\r\n     * @type {Array}\r\n     */\r\n    @Input() public asyncValidators: AsyncValidatorFn[] = [];\r\n\r\n    /**\r\n     * @name inputId\r\n     * @type {string}\r\n     */\r\n    @Input() public inputId: string;\r\n\r\n    /**\r\n     * @name inputClass\r\n     * @type {string}\r\n     */\r\n    @Input() public inputClass: string;\r\n\r\n    /**\r\n     * @name inputText\r\n     */\r\n    @Input() public get inputText(): string {\r\n        return this.inputTextValue;\r\n    }\r\n\r\n    /**\r\n     * @name tabindex\r\n     * @desc pass through the specified tabindex to the input\r\n     * @type {string}\r\n     */\r\n    @Input() public tabindex: string = undefined;\r\n\r\n    /**\r\n     * @name disabled\r\n     */\r\n    @Input() public disabled = false;\r\n\r\n    /**\r\n     * @name inputText\r\n     * @param text {string}\r\n     */\r\n    public set inputText(text: string) {\r\n        this.inputTextValue = text;\r\n        this.inputTextChange.emit(text);\r\n    }\r\n\r\n    /**\r\n     * @name input\r\n     */\r\n    @ViewChild('input') public input;\r\n\r\n    /**\r\n     * @name form\r\n     */\r\n    public form: FormGroup;\r\n\r\n    /**\r\n     * @name inputTextChange\r\n     * @type {EventEmitter}\r\n     */\r\n    @Output() public inputTextChange: EventEmitter<string> = new EventEmitter();\r\n\r\n    /**\r\n     * @name inputTextValue\r\n     */\r\n    public inputTextValue = '';\r\n\r\n    constructor(private renderer: Renderer2) {}\r\n\r\n    public ngOnInit() {\r\n        // creating form\r\n        this.form = new FormGroup({\r\n            item: new FormControl('',\r\n                Validators.compose(this.validators),\r\n                Validators.composeAsync(this.asyncValidators)\r\n            )\r\n        });\r\n    }\r\n\r\n\t/**\r\n     * @name value\r\n     * @returns {AbstractControl}\r\n     */\r\n    public get value(): AbstractControl {\r\n        return this.form.get('item');\r\n    }\r\n\r\n\t/**\r\n     * @name isInputFocused\r\n     * @returns {boolean}\r\n     */\r\n    public isInputFocused(): boolean {\r\n        return document.activeElement === this.input.nativeElement;\r\n    }\r\n\r\n\t/**\r\n     * @name getErrorMessages\r\n     * @param messages\r\n     * @returns {string[]}\r\n     */\r\n    public getErrorMessages(messages): string[] {\r\n        return Object.keys(messages)\r\n            .filter(err => this.value.hasError(err))\r\n            .map(err => messages[err]);\r\n    }\r\n\r\n    /**\r\n     * @name hasErrors\r\n     * @returns {boolean}\r\n     */\r\n    public hasErrors(): boolean {\r\n        return this.form.dirty &&\r\n            this.form.value.item &&\r\n            this.form.invalid;\r\n    }\r\n\r\n\t/**\r\n     * @name focus\r\n     */\r\n    public focus(): void {\r\n        this.input.nativeElement.focus();\r\n    }\r\n\r\n    /**\r\n     * @name blur\r\n     */\r\n    public blur(): void {\r\n        this.input.nativeElement.blur();\r\n    }\r\n\r\n\t/**\r\n     * @name getElementPosition\r\n     * @returns {ClientRect}\r\n     */\r\n    public getElementPosition(): ClientRect {\r\n        return this.input.nativeElement.getBoundingClientRect();\r\n    }\r\n\r\n    /**\r\n     * - removes input from the component\r\n     * @name destroy\r\n     */\r\n    public destroy(): void {\r\n        const input = this.input.nativeElement;\r\n        input.parentElement.removeChild(input);\r\n    }\r\n\r\n    /**\r\n     * @name onKeyDown\r\n     * @param $event\r\n     */\r\n    public onKeyDown($event) {\r\n        return this.onKeydown.emit($event);\r\n    }\r\n\r\n    /**\r\n     * @name submit\r\n     */\r\n    public submit($event: any): void {\r\n        this.onSubmit.emit($event);\r\n    }\r\n}\r\n"]}